1.父组件采用-连接的方式的时候,子组件要使用驼峰命名的方式
2.Vue中是单向数据流的,子组件不能更改父组件的数据,只能使用,要更改的话,你可以自定义一个数据
3.Vue双向数据流的意义在于,降低代码的耦合性,防止子组件件改变父组件的数据而影响其他组件


props:['count']
data(){
 return {
   mycount
}

}



父组件
<div test :content="num" :a="a" :b="b" :c="c"></div>
const app = Vue.createApp({
return {
params:{
num:1234,
a:123,
b:456,
c:789
}
}
})
子组件
props:['content','a','b','c']

传递参数时,可以考虑传递一个对象


atten:父组件采用:content-abc="content"传递属性
子组件接受的时候,属性名要改成驼峰式的命名
props:["contentAbc"]

父组件的数据可以流向子组件,子组件的数据不能反向的修改父组件的数据,你只能用,不能修改
//你可以自己定义一个父组件的数据,而不去修改父组件的数据
props:['count'],
data(){
  return {
    myCount:this.count,
}
}

单向数据流为的是避免子组件改父组件数据,而父组件数据刚好应用到别的子组件上,从而避免耦合

