//监视属性watch:
1.当监视的属性发生变化时,回调函数自动调用,进行相关操作
2.监视属性必须存在,才能进行监视
3.监视的两种写法
   (1).new Value时传入watch配置
   (2).通过vm.$watch监视


//深度监视
(1).Vue自身可以监测对象内部值的改变,但Vue提供的watch默认不可以
(2).使用watch时根据数据的具体结构,决定是否采用深度监视.



watch:{
ishot:{
  //immediate:true.//初始化时让handler调用一下
   //handler什么时候调用?当isHot发生改变时
   handler(newValue,oldValue){
     console.log('isHot被修改了')
}
}
}


另一种监视方式
vm.$watch('isHot',{
   immediate;true,//初始化时让handler调用一下
   //handler什么时候调用?当isHot发生改变时
   handler(newValue,oldValue){
       console.log(isHot被修改了,newValue,oldValue)
}
})

-----------------------------------------------
//深度监视,监视多级结构中某个属性的变化

const vm = new Vue({
el:'#root',
data:{
isHot:true,
numbers:{
a:1,
b:1
}
},
})
watch:{
'numbers.a':{
 handler(){
 console.log('a被改变了')
}
}

}


watch:{

numbers:{
 deep:true,
 handler(){
   console.log('numbers改变了')
}

}
 

}


}

numbers是data里面的一个key

----------------------(监视的简写属性)
watch:{
//正常写法
 isHot:{
   immediate:true,//初始化时让handler调用一下
   deep;true,//深度监视
   handler(newValue,oldValue){
   console.log('isHot被修改了',newValue,oldValue)
}
},

//简写
isHot(newValue,oldValue){
 
console.log('isHot被修改了',newValue,oldValue)
}
}



vm.$watch('isHot',{
   immediate:true,//初始化时让handler调用一下
   deep:true,//深度监视
   handler(newValue,oldValue){
   console.log('isHot被修改了',newValue,oldValue)
}

})

vm.$watch('isHot',(currentValue,prevValue)=>{

console.log('isHot被修改了',newValue,oldValue,this)
})