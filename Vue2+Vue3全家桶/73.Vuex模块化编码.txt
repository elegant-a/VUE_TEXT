7.模块化+命名空间
1.目的:让代码更好维护,让多种数据分类更加明确

//由于increment和decrement都需要value值,我们调用的时候,都要为其传入value值
这样我们才能在mutations里面操作value的数值


2.修改store.js
   const countAbout ={
     namespaced:true,//开启命名空间
     state:{x:1},
     mutations:{....},
     actions:{......},
     getters:{
         bigSum(state){
            return state.sum *10
}
}
}


const personAbout = {
   namespaced:true,//开启命名空间
   state:{...},
   mutations:{...},
   actions:{....}
},

const store = createStore({

modules{
countAbout
personAbout
}
})

3.开启命名空间后,组件中读取state数据:
//方式一:自己直接读取
this.$store.state.personAbout.list
//方式二:借住mapState读取:
...mapState('countAbout',['sum','school','subject']),

4.开启命名空间后,组件中读取getters数据:
//方式一:自己直接读取
this.$store.getters['personAbout/firstPersonName']
//方式二:借住mapGetters读取:
...mapGetters('countAbout',['bigSum'])

5.开启命名空间后,组件中调用dispatch
//方式一:自己直接dispatch
this.$store.dispatch('personAbout/addPersonWang',person)
//方式二:借住mapActions:
...mapActions('countAbout',{incrementOdd:'jiaOdd',incrementWait:'jiaWait'})

6.开启命名空间后,组件中调用commit
方式一:自己直接commit
this.$store.commit('personAbout/ADD_PERSON',person)
方式二:借住mapMutations:
//'countAbout'对应的是相应的模块,increment对应的是methods里面的方法名,.'JIA'对应的是mutations里面的方法
...mapMutations('countAbout',{increment:'JIA',decrement:'JIAN'})


....mapState和mapGetters都是写在computed中的

...mapMutations和...mapActions是写在methdos中的数据

...mapMutations({increment:'JIA',decrement:'JIAN'})
//相当于写了这么一句话
this.$store.commit('personAbout/ADD_PERSON,')


vue里面组件库一般都是小写的
例如
import Vue from 'vue'
//引入Vuex
import Vuex from 'vuex'
//应用Vuex插件
Vue.use(Vuex)

const countOptions = {}
const personOptions = {}



import { createStore } from 'vuex'

export default createStore({
  state: {
  },
  mutations: {
  },
  actions: {
  },
  modules: {
  }
})


//只有增加了name:true,我们的
'countAbout'才能被...mapState所认识


namespaced:true,



actions:{
  addPersonWang(context,value){
   if(value.name.indexOf('王') === 0){
      context.commit('ADD_PERSON',value)
}
}
}

mutations:{
ADD_PERSON(state,value){
  console.log('mutations中的ADD_PERSON被调用了')
  state.personList.unshift(value)



}
}



actions中的函数传入的参数为context和value
mutations里面传入的参数为 state和value


computed:{
   personList(){
          return this.$store.state.personAbout.personList
}
   sum(){
     return this.$store.state.countAbout.sum
}
}


//获取数据
computed:{
 personList(){
    return this.$store.state.personAbout.personList
},
 sum(){
    return this.$store.state.countAbout.sum
}

methods:{
 add(){
   const personObj = {id:nanoid(),name:this.name}
   this.$store.commit('personAbout/ADD_PERSON',personObj)
   this.name = ''
},
addWang(){
  const personObj = {id:nanoid(),name:this.name}
  this.$store.dispatch('personAbout/addPersonWang',personObj)
  this.name = ''
}

}


}


name变量是我需要的,我要用一个双向绑定



addPersonServer(context){
  axios.get('https://api.uixj.cn/hitokoto/get?type=social').then(
   response => {
     context.commit('ADD_PERSON',{id:nanoid(),name:response.data})
},
error => {

 alert(error.message)
}
)

}