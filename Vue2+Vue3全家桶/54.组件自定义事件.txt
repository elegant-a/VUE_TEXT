组件的自定义事件
1.一种组件间的通信方式,适用于:子组件===>父组件
2.适用场景:A是父组件,B是子组件,B想给A传数据,那么就要在A中给B绑定自定义事件(事件的回调在A中)
3.绑定自定义事件:
   1.第一种方式:在父组件中<Demo @atguigu="test" />或<Demo v-on:atguigu="test"/>
   2.第二种方式,在父组件中:
      <Demo ref="demo">

mounted(){
 this.$refs.xxx.$on('atguigu',this.test)
}
3.若想让自定义事件只能触发一次,可以使用once修饰符,或$once方法
4.触发自定义事件:this.$emit('atguigu',数据)
5.解绑自定义事件this.$off('atguigu')
6.组件上也可以绑定原生Dom事件,需要使用native修饰符,绑定的事件会自动绑定到最外层的DOM元素上
7.注意:通过this.$refs.xxx.$on('atguigu',回调)绑定过自定义事件时,回调要么配置在methods中,要门使用箭头函数s
否则this指向会出现问题




click,keyup这些内置事件是给html元素用的
//我们这小节讲的组件的自定义事件
//插值语法中用的有(data,props,computed)


<h1>你好啊</h1>
//给子组件传递数据
//通过父组件给子组件传递函数类型的props实现:子给父传递数据
//通过父组件给子组件绑定一个自定义事件实现:子给父传递数据
<School :getSchoolName="getSchoolName">
<Student v-on:atguigu="demo" />
export default{
name:'App',
components:{School,Student},
data(){
 return{
  msg:'你好啊'
}
},
  methods:{
   getSchoolName(name){
    console.log('APP收到了')
},
demo(){
  console.log('demo被调用了!')
},
getStudentName(name){

console.log("App收到了学生名:",name)
//在触发的事件里面,
将name的值赋值给data中的数据,我们父组件就可以使用studentName的值了
this.student = name;
}
}
}



Student.vue
methods:{
sendStudentName(){
//触发studeng组件实例上的atguigu事件
  this.$emit('atguigu',this.name)
}

}

Vue底层当中,谁触发的atguigu,方法中的this就是谁

箭头函数没有自己的this,

mounted(){
 this.$refs.student.$on('atguigu',this.getStudentName)
}