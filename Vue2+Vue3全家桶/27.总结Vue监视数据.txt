Vue监视数据的原理:
1.Vue会监视data中所有层次的数据

2.如何监测对象中的数据?
   通过setter实现监视,且要在 new Vue时就要传入监测的数据
   (1).对象中后追加的属性,Vue默认不做响应式处理
   (2).如需给后添加的属性做响应式,请使用如下API:
            Vue.set(target,propertyName/index,vlaue)或
             vm.$set(target,ropertyName/index,value)

3.如何监测数组中的数据?
            通过包裹数组更新元素的方法实现,本质就是做了两件事:
            (1).调用原生对应的方法对数组进行更新
            (2).重新解析模板,进而更新页面
4.在Vue修改数组中的某个元素一定要用如下方法
1.使用这些API:push(),pop(),shift(),unshift(),splice(),sort(),reverse()
2.Vue.set() 或 vm.$set()

//特别注意:Vue.set() 和 vm.$set()不能给vm或 vm的根数据对象 添加属性
              换言之就是不能往vm和vm._data上添加属性


//变更方法
替换数组
变更方法,例如filter,concat()和slice().它们不会变更原始数组,而总是返回一个新
数组,当使用变更方法时,可以使用新数组替换掉旧数组


<button @click="student.age++">年龄+1岁</button></br>
<button @click="addSex">添加性别属性,默认值:男</button></br>
<button @click="student.sex = '未知' ">修改性别</button></br>
<button @click="addFriend">在列表首位添加一个朋友</button></br>
<button @click="student.age++">修改第一个朋友的名字为:张三</button></br>
<button @click="student.age++">添加一个爱好</button></br>
<button @click="student.age++">修改第一个爱好为:开车</button></br>



methods:{
  addSex(){
    //Vue.set(this.student.'sex','男')
},
addFriend(){
     this.student.friends.unshift({name:'jack',age:70})
},
updateFristFriendName(){
  this.student.friends[0].name = '张三';//不正确,Vue除了那七个数组操作和Vue.set进行的数组赋值
  操作,都不能被Vue监测出来进行响应式操作
}

addHobby(){
  this.student.hobby.push('学习')
},
updateHobby(){
//this.student.hobby.splice(0,1,'开车')
Vue.set(this.student.hobby,0,开车)

}






}






