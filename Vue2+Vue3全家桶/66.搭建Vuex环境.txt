1.npm install vuex
2.Vue.use(Vuex)
3.store
4.vc ==>store


1.概念
       在Vue中实现集中式状态(数据)管理的一个Vue插件,对vue应用多个组件的共享状态进行集中式的管理
       (读/写),也是一种组件间通信的方式,且适用于任意组件间通信.
2.何时使用?
      多个组件需要共享数据时
3.搭建vuex环境
(1)创建文件:src/store/index.js
//引入Vue核心库
import Vue from 'vue'
//引入Vuex
import Vuex from 'vuex'
//应用Vuex插件
Vue.use(Vuex)

//准备actions对象-相应组件中用户动作
const actions = {}
//准备mutations对象-修改state中的数据
const mutations = {}
//准备state对象-保存具体的数据
const state = {}


//创建并暴露store
export default new Vuex.Store({

 actions,
 mutations,
 state
})

2.在main.js中创建vm时传入store配置项
//引入store
import store from './store'
.....


//创建vm
new Vue({
el:"#app",
render:h => h(App),
store

})










//在main.js里面的操作

//脚手架中的引入语句(import)
//不管脚手架在哪里引入了import
//中间是否引入了其他语句,都会把import按照引入顺序放到开头



//引入Vuex
import Vuex from 'vuex'
//使用Vuex
Vue.use(Vuex)

//该文件用于创建Vuex中最为核心的store
//准备actions--永不相应组件中的动作
const actions = {}
//准备mutations--用于操作数据(state)
const mutations = {}
//准备state---用于存储数据
const state = {}

//创建并暴露store
export default new Vuex.Store({
 actions:actions,
 mutations:mutations,
 state:state
})

import Vuex from 'vuex'

//应用Vuex插件
Vue.use(Vuex)

